// **************************************************************************
//
//               FreeRTOS demo program for OSY labs
//
// Subject:      Operating Systems
// Author:       Petr Olivka, petr.olivka@vsb.cz, 02/2022
// Organization: Department of Computer Science, FEECS,
//               VSB-Technical University of Ostrava, CZ
//
// File:         GPIO initialization for interrupts
//
// **************************************************************************
//
/* FreeRTOS kernel includes. */
#include <demo-pwm-bin.h>
#include "FreeRTOS.h"
#include "semphr.h"

/* System includes. */
#include <stdio.h>
#include "board.h"
#include "peripherals.h"
#include "pin_mux.h"
//#include "clock_config.h"
//#include "MK64F12.h"
#include "fsl_debug_console.h"

#include "demo-pwm-bin.h"

// Task priorities.
#define LOW_TASK_PRIORITY 		(configMAX_PRIORITIES - 2)
#define NORMAL_TASK_PRIORITY 	(configMAX_PRIORITIES - 1)
#define HIGH_TASK_PRIORITY 		(configMAX_PRIORITIES)

#define TASK_NAME_SNAKE_PWM			"snake pwm"
#define TASK_NAME_RGB_PWM			"rgb pwm"
#define TASK_NAME_RGB_SET			"rgb set"
#define TASK_NAME_LEFT_SWITCH		"left switch"
#define TASK_NAME_INLEFT_SWITCH		"in left switch"
#define TASK_NAME_INRIGHT_SWITCH	"in right switch"
#define TASK_NAME_RIGHT_SWITCH		"right switch"

#define LED_PTA_NUM 	2
#define LED_PTC_NUM		8
#define LED_PTB_NUM		9

// pair of GPIO port and LED pin.
struct LED_Data
{
	uint32_t m_led_pin;
	GPIO_Type *m_led_gpio;
};

// all PTCx LEDs in array
LED_Data g_led_ptc[ LED_PTC_NUM ] =
{
		{ LED_PTC0_PIN, LED_PTC0_GPIO },
		{ LED_PTC1_PIN, LED_PTC1_GPIO },
		{ LED_PTC2_PIN, LED_PTC2_GPIO },
		{ LED_PTC3_PIN, LED_PTC3_GPIO },
		{ LED_PTC4_PIN, LED_PTC4_GPIO },
		{ LED_PTC5_PIN, LED_PTC5_GPIO },
		{ LED_PTC7_PIN, LED_PTC7_GPIO },
		{ LED_PTC8_PIN, LED_PTC8_GPIO },
};

LED_Data g_led_ptb[ LED_PTB_NUM ] =
{
		{ LED_PTB2_PIN , LED_PTB2_GPIO   },
		{ LED_PTB3_PIN , LED_PTB3_GPIO   },
		{ LED_PTB9_PIN , LED_PTB9_GPIO   },
		{ LED_PTB10_PIN, LED_PTB10_GPIO  },
		{ LED_PTB11_PIN, LED_PTB11_GPIO  },
		{ LED_PTB18_PIN, LED_PTB18_GPIO  },
		{ LED_PTB19_PIN, LED_PTB19_GPIO  },
		{ LED_PTB20_PIN, LED_PTB20_GPIO  },
		{ LED_PTB23_PIN, LED_PTB23_GPIO  },
};

// global variables
SemaphoreHandle_t g_sem_left_switch;
SemaphoreHandle_t g_sem_in_left_switch;
SemaphoreHandle_t g_sem_in_right_switch;
SemaphoreHandle_t g_sem_right_switch;
//SemaphoreHandle_t g_sem_rgb_pwm;

int32_t g_rgb_pwm_perc[ LED_PTB_NUM ] = { 0, 0, 0, 5, 5, 5, 0, 0, 0 };
int32_t g_rgb_pwm_run = 1;
int32_t g_rgb_pwm_inx = 0;



extern "C" {
void PORTC_IRQHandler(void);
}

// ISR for PORTC
void PORTC_IRQHandler(void)
{
    /* Clear external interrupt flag. */
	uint32_t l_mask = GPIO_PortGetInterruptFlags( SW_PTC9_GPIO );
	TickType_t l_cur_tick = xTaskGetTickCount();
	static TickType_t l_left_last = 0;
	static TickType_t l_in_left_last = 0;
	static TickType_t l_in_right_last = 0;
	static TickType_t l_right_last = 0;

	// DO NOT USE return in this Interrupt Service Routine!!!

	// Switch PTC9
	if ( l_mask & SW_PTC9_GPIO_PIN_MASK )
	{
		// RECOMMENDED SOLUTION!!!
		// wakeup some process using semaphore
		if ( l_left_last + 10 < l_cur_tick )
		{
			xSemaphoreGiveFromISR( g_sem_left_switch, nullptr );
			l_left_last = l_cur_tick;
		}
	}

	// Switch PTC10
	if ( l_mask & SW_PTC10_GPIO_PIN_MASK )
	{
		if ( l_in_left_last + 10 < l_cur_tick )
		{
			xSemaphoreGiveFromISR( g_sem_in_left_switch, nullptr );
			l_in_left_last = l_cur_tick;
		}
	}

	// Switch PTC11
	if ( l_mask & SW_PTC11_GPIO_PIN_MASK )
	{
		if ( l_in_right_last + 10 < l_cur_tick )
		{
			xSemaphoreGiveFromISR( g_sem_in_right_switch, nullptr );
			l_in_right_last = l_cur_tick;
		}
	}

	// Switch PTC12
	if ( l_mask & SW_PTC12_GPIO_PIN_MASK )
	{
		if ( l_right_last + 10 < l_cur_tick )
		{
			xSemaphoreGiveFromISR( g_sem_right_switch, nullptr );
			l_right_last = l_cur_tick;
		}
	}

	// Clear interrrupt flags
    GPIO_PortClearInterruptFlags( SW_PTC9_GPIO,
    		SW_PTC9_GPIO_PIN_MASK | SW_PTC10_GPIO_PIN_MASK | SW_PTC11_PIN_MASK | SW_PTC12_PIN_MASK );
}

// Initialize GPIO for interrupts
void InitGPIOInterrupts()
{
	// Set correct priority
    NVIC_SetPriority( PORTC_IRQn, 3 );

    // Enable interrupt for switches
    // Available interrupt methods: kPORT_InterruptFallingEdge,kPORT_InterruptRisingEdge, kPORT_InterruptEitherEdge;
    PORT_SetPinInterruptConfig( SW_PTC9_PORT, SW_PTC9_PIN, kPORT_InterruptFallingEdge );
    PORT_SetPinInterruptConfig( SW_PTC9_PORT, SW_PTC10_PIN, kPORT_InterruptFallingEdge );
    PORT_SetPinInterruptConfig( SW_PTC9_PORT, SW_PTC11_PIN, kPORT_InterruptFallingEdge );
    PORT_SetPinInterruptConfig( SW_PTC9_PORT, SW_PTC12_PIN, kPORT_InterruptFallingEdge );

    // Enable interrupt
    EnableIRQ( PORTC_IRQn );

    // Create binary semaphores
    g_sem_left_switch = xSemaphoreCreateBinary();
    g_sem_in_left_switch = xSemaphoreCreateBinary();
    g_sem_in_right_switch = xSemaphoreCreateBinary();
    g_sem_right_switch = xSemaphoreCreateBinary();

    //xSemaphoreGive( g_sem_rgb_pwm );
}

// Tasks
void task_left_switch( void *t_arg )
{
	while ( 1 )
	{
		xSemaphoreTake( g_sem_left_switch, portMAX_DELAY );
		vTaskDelay( 1 );
		if ( GPIO_PinRead( SW_PTC9_GPIO, SW_PTC9_PIN ) != 0 ) continue;

		g_rgb_pwm_run = !g_rgb_pwm_run;
	}
}

void task_in_left_switch( void *t_arg )
{
	while ( 1 )
	{
		xSemaphoreTake( g_sem_in_left_switch, portMAX_DELAY );
		vTaskDelay( 1 );
		if ( GPIO_PinRead( SW_PTC10_GPIO, SW_PTC10_PIN ) != 0 ) continue;

		g_rgb_pwm_inx = ( g_rgb_pwm_inx + 1 ) % LED_PTB_NUM;
	}
}

void task_in_right_switch( void *t_arg )
{
	while ( 1 )
	{
		xSemaphoreTake( g_sem_in_right_switch, portMAX_DELAY );
		vTaskDelay( 1 );
		if ( GPIO_PinRead( SW_PTC11_GPIO, SW_PTC11_PIN ) != 0 ) continue;

		g_rgb_pwm_perc[ g_rgb_pwm_inx ] -= 5;
		if ( g_rgb_pwm_perc[ g_rgb_pwm_inx ] < 0 )
			g_rgb_pwm_perc[ g_rgb_pwm_inx ] = 0;
	}
}

void task_right_switch( void *t_arg )
{
	while ( 1 )
	{
		xSemaphoreTake( g_sem_right_switch, portMAX_DELAY );
		vTaskDelay( 1 );
		if ( GPIO_PinRead( SW_PTC12_GPIO, SW_PTC12_PIN ) != 0 ) continue;

		g_rgb_pwm_perc[ g_rgb_pwm_inx ] += 5;
		if ( g_rgb_pwm_perc[ g_rgb_pwm_inx ] > 100 )
			g_rgb_pwm_perc[ g_rgb_pwm_inx ] = 100;
	}
}

#define T 20
#define T_PERC( PERC ) ( ( T * PERC ) / 100 )

void task_snake_pwm( void * t_arg )
{
	int32_t l_inx = 0;
	int32_t l_dir = 1;
	int32_t repeat = 5;

	TickType_t l_ticks = xTaskGetTickCount();

	for ( ;; )
	{
		for ( int32_t t = 0; t < T; t++ )
		{
			for ( int32_t led = 0; led < LED_PTC_NUM; led++ )
			{
				if ( led != l_inx )
				{
					if ( t == T_PERC( 5 ) )
						GPIO_PinWrite( g_led_ptc[ led ].m_led_gpio, g_led_ptc[ led ].m_led_pin, 0 );
				}
				else
				{
					if ( t == T_PERC( 30 ) )
						GPIO_PinWrite( g_led_ptc[ led ].m_led_gpio, g_led_ptc[ led ].m_led_pin, 0 );
				}
			}

			vTaskDelayUntil( &l_ticks, 1 );
		}

		for ( uint32_t led = 0; led < LED_PTC_NUM; led++ )
			GPIO_PinWrite( g_led_ptc[ led ].m_led_gpio, g_led_ptc[ led ].m_led_pin, 1 );

		if ( ( l_dir > 0 && l_inx == 7 ) || ( l_inx == 0 && l_dir < 0 ) )
		{
			l_dir = -l_dir;
		}
		repeat--;
		if ( repeat == 0 )
		{
			l_inx += l_dir;
			repeat = 5;
		}
	}
}

void task_rgb_pwm( void * t_arg )
{
	TickType_t l_ticks = xTaskGetTickCount();

	for ( ;; )
	{
		for ( int32_t led = 0; led < LED_PTB_NUM; led++ )
		{
			GPIO_PinWrite( g_led_ptb[ led ].m_led_gpio, g_led_ptb[ led ].m_led_pin, 0 );
		}

		TaskHandle_t l_task = xTaskGetHandle( TASK_NAME_RGB_SET );
	    //xSemaphoreTake( g_sem_rgb_pwm, portMAX_DELAY );
	    //xSemaphoreGive( g_sem_rgb_pwm );
		if ( g_rgb_pwm_run == 0 )
		{
			vTaskResume( l_task );
			vTaskSuspend( 0 );
		}


		for ( int32_t t = 0; t < T; t++ )
		{
			for ( int32_t led = 0; led < LED_PTB_NUM; led++ )
			{
				int32_t onoff = ( g_rgb_pwm_perc[ led ] != 0 && t < T_PERC( g_rgb_pwm_perc[ led ] ) );
				GPIO_PinWrite( g_led_ptb[ led ].m_led_gpio, g_led_ptb[ led ].m_led_pin, onoff );
			}

			vTaskDelayUntil( &l_ticks, 1 );
		}
	}
}

void task_rgb_set( void * t_arg )
{
	TaskHandle_t l_task = xTaskGetHandle( TASK_NAME_RGB_PWM );
	int32_t l_inx_last = g_rgb_pwm_inx;
	//int32_t l_inx_cur;
	int32_t odd_even = 1;

	while ( 1 )
	{
		GPIO_PinWrite( g_led_ptb[ l_inx_last ].m_led_gpio, g_led_ptb[ l_inx_last ].m_led_pin, 0 );
		if ( g_rgb_pwm_run != 0 )
		{
			vTaskResume( l_task );
			vTaskSuspend( 0 );
		}

		l_inx_last = g_rgb_pwm_inx;
		odd_even = !odd_even;
		for ( int t = 0; t < T; t++ )
		{
			int32_t onoff = ( g_rgb_pwm_perc[ l_inx_last ] != 0 && t < T_PERC( g_rgb_pwm_perc[ l_inx_last ] );
			if ( odd_even )
				GPIO_PinWrite( g_led_ptb[ l_inx_last ].m_led_gpio, g_led_ptb[ l_inx_last ].m_led_pin, onoff );
			vTaskDelay( 1 );
		}
	}
}

void InitDemoApp()
{
	InitGPIOInterrupts();

    // Create tasks
    if ( xTaskCreate(
    		task_left_switch,
			TASK_NAME_LEFT_SWITCH,
			configMINIMAL_STACK_SIZE + 100,
			NULL,
			NORMAL_TASK_PRIORITY,
			NULL) != pdPASS )
    {
        PRINTF( "Unable to create task '%s'!\r\n", TASK_NAME_LEFT_SWITCH );
    }

    if ( xTaskCreate( task_in_left_switch, TASK_NAME_INLEFT_SWITCH, configMINIMAL_STACK_SIZE + 100, NULL, NORMAL_TASK_PRIORITY, NULL) != pdPASS )
    {
        PRINTF( "Unable to create task '%s'!\r\n", TASK_NAME_INLEFT_SWITCH );
    }

    if ( xTaskCreate( task_in_right_switch, TASK_NAME_INRIGHT_SWITCH, configMINIMAL_STACK_SIZE + 100, NULL, NORMAL_TASK_PRIORITY, NULL) != pdPASS )
    {
        PRINTF( "Unable to create task '%s'!\r\n", TASK_NAME_INRIGHT_SWITCH );
    }

    if ( xTaskCreate( task_right_switch, TASK_NAME_RIGHT_SWITCH, configMINIMAL_STACK_SIZE + 100, NULL, NORMAL_TASK_PRIORITY, NULL) != pdPASS )
    {
        PRINTF( "Unable to create task '%s'!\r\n", TASK_NAME_RIGHT_SWITCH );
    }

    if ( xTaskCreate( task_snake_pwm, TASK_NAME_SNAKE_PWM, configMINIMAL_STACK_SIZE + 100, NULL, HIGH_TASK_PRIORITY, NULL) != pdPASS )
    {
        PRINTF( "Unable to create task '%s'!\r\n", TASK_NAME_SNAKE_PWM );
    }

    if ( xTaskCreate( task_rgb_pwm, TASK_NAME_RGB_PWM, configMINIMAL_STACK_SIZE + 100, NULL, HIGH_TASK_PRIORITY, NULL) != pdPASS )
    {
        PRINTF( "Unable to create task '%s'!\r\n", TASK_NAME_RGB_PWM );
    }

    if ( xTaskCreate( task_rgb_set, TASK_NAME_RGB_SET, configMINIMAL_STACK_SIZE + 100, NULL, HIGH_TASK_PRIORITY, NULL) != pdPASS )
    {
        PRINTF( "Unable to create task '%s'!\r\n", TASK_NAME_RGB_SET );
    }

}
