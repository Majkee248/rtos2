/*
 * Copyright 2016-2022 NXP
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * o Neither the name of NXP Semiconductor, Inc. nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * @file    demo.cpp
 * @brief   Application entry point.
 */
/* FreeRTOS kernel includes. */
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "timers.h"

/* System includes. */
#include <stdio.h>
#include "board.h"
#include "peripherals.h"
#include "pin_mux.h"
#include "clock_config.h"
#include "MK64F12.h"
#include "fsl_debug_console.h"

/* TODO: insert other include files here. */

/* TODO: insert other definitions and declarations here. */

/* Task priorities. */
#define low_task_PRIORITY 		(configMAX_PRIORITIES - 2)
#define normal_task_PRIORITY 	(configMAX_PRIORITIES - 1)
#define high_task_PRIORITY 		(configMAX_PRIORITIES)

// pair of GPIO port and LED pin.
struct LED_Data
{
	GPIO_Type *m_led_gpio;
	uint32_t m_led_pin;
};

#define LED_PTA_NUM 	2
#define LED_PTC_NUM		8

LED_Data g_led_pta[ LED_PTA_NUM ] =
{
		{ LED_PTA1_GPIO, LED_PTA1_PIN },
		{ LED_PTA2_GPIO, LED_PTA2_PIN },
};

LED_Data g_led_ptc[ LED_PTC_NUM ] =
{
		{ LED_PTC0_GPIO, LED_PTC0_PIN },
		{ LED_PTC1_GPIO, LED_PTC1_PIN },
		{ LED_PTC2_GPIO, LED_PTC2_PIN },
		{ LED_PTC3_GPIO, LED_PTC3_PIN },
		{ LED_PTC4_GPIO, LED_PTC4_PIN },
		{ LED_PTC5_GPIO, LED_PTC5_PIN },
		{ LED_PTC7_GPIO, LED_PTC7_PIN },
		{ LED_PTC8_GPIO, LED_PTC8_PIN },
};

// This task blink alternatively both PTAx LEDs
void task_led_pta_blink( void *t_arg )
{
	uint32_t l_inx = 0;
    for (;;)
    {
    	// switch LED on
        GPIO_PinWrite( g_led_pta[ l_inx ].m_led_gpio, g_led_pta[ l_inx ].m_led_pin, 1 );
        vTaskDelay( 200 );
        // switch LED off
        GPIO_PinWrite( g_led_pta[ l_inx ].m_led_gpio, g_led_pta[ l_inx ].m_led_pin, 0 );
        // next LED
        l_inx++;
        l_inx %= LED_PTA_NUM;
    }
}

void task_snake_left( void *t_arg )
{
	for ( ;; )
	{
		vTaskSuspend( 0 );

		for ( int inx = 0; inx < LED_PTC_NUM; inx++ )
		{
	    	// switch LED on
	        GPIO_PinWrite( g_led_ptc[ inx ].m_led_gpio, g_led_ptc[ inx ].m_led_pin, 1 );
	        vTaskDelay( 200 );
	        // switch LED off
	        GPIO_PinWrite( g_led_ptc[ inx ].m_led_gpio, g_led_ptc[ inx ].m_led_pin, 0 );
		}
	}
}

void task_snake_right( void *t_arg )
{
	for ( ;; )
	{
		vTaskSuspend( 0 );

		for ( int inx = LED_PTC_NUM - 1; inx >= 0; inx-- )
		{
	    	// switch LED on
	        GPIO_PinWrite( g_led_ptc[ inx ].m_led_gpio, g_led_ptc[ inx ].m_led_pin, 1 );
	        vTaskDelay( 200 );
	        // switch LED off
	        GPIO_PinWrite( g_led_ptc[ inx ].m_led_gpio, g_led_ptc[ inx ].m_led_pin, 0 );
		}
	}
}

void task_switches( void *t_arg )
{
	TaskHandle_t handle_pta_led_task = xTaskGetHandle( "led_pta" );
	TaskHandle_t handle_led_snake_l = xTaskGetHandle( "led_snake_l" );
	TaskHandle_t handle_led_snake_r = xTaskGetHandle( "led_snake_r" );

	while ( 1 )
	{
		if ( GPIO_PinRead( SW_PTC9_GPIO, SW_PTC9_PIN ) == 0 )
		{
			vTaskSuspend( handle_pta_led_task );
		}

		if ( GPIO_PinRead( SW_PTC10_GPIO, SW_PTC10_PIN ) == 0 )
		{
			vTaskResume( handle_pta_led_task );
		}

		if ( GPIO_PinRead( SW_PTC11_GPIO, SW_PTC11_PIN ) == 0 )
		{
			vTaskResume( handle_led_snake_l );
		}

		vTaskDelay( 1 );
	}
}

/*
 * @brief   Application entry point.
 */
int main(void) {

    /* Init board hardware. */
    BOARD_InitBootPins();
    BOARD_InitBootClocks();
    BOARD_InitBootPeripherals();
    BOARD_InitDebugConsole();

    if (xTaskCreate( task_led_pta_blink, "led_pta", configMINIMAL_STACK_SIZE + 100, NULL, normal_task_PRIORITY, NULL ) !=
        pdPASS)
    {
        PRINTF("Task creation failed!.\r\n");
        while (1)
            ;
    }
    if (xTaskCreate( task_snake_left, "led_snake_l", configMINIMAL_STACK_SIZE + 100, NULL, normal_task_PRIORITY, NULL ) !=
        pdPASS)
    {
        PRINTF("Task creation failed!.\r\n");
        while (1)
            ;
    }
    if (xTaskCreate( task_snake_right, "led_snake_r", configMINIMAL_STACK_SIZE + 100, NULL, normal_task_PRIORITY, NULL ) !=
        pdPASS)
    {
        PRINTF("Task creation failed!.\r\n");
        while (1)
            ;
    }
    if (xTaskCreate( task_switches, "swtiches", configMINIMAL_STACK_SIZE + 100, NULL, normal_task_PRIORITY, NULL) !=
            pdPASS)
        {
            PRINTF("Task creation failed!.\r\n");
            while (1)
                ;
        }
vTaskStartScheduler();
    for (;;)
        ;

    return 0 ;
}
